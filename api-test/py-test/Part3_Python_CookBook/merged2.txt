#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Author: HuHao <huhao1@cmcm.com>
Author: HuHao <huhao1@cmcm.com>
Author: HuHao <huhao1@cmcm.com>
Date: '2018/7/18'
Date: '2018/7/18'
Date: '2018/7/21'
Info:
        
"""
Info:
        
"""
Info:
        
"""

import os,traceback
import heapq

class PriortyQueue:
	def __init__(self):
		self._queue = []
		self._index = 0
	def push(self,item,priroity):
		'''往内置_queue 中插入item 对象，并维护插入顺序_index 和 优先级 priroity（此处取优先级大的，因此取负数）,
		如果单纯使用 priroity 优先级维护插入和弹出顺序的话，当优先级一致时，就无法执行插入了，会报错，因此还需要维护自增索引。
		优先级不同 从大到小，优先级相同，按插入顺序先进先出
		'''
		heapq.heappush(self._queue,(-priroity,self._index,item))
		self._index +=1

	def pop(self):
		return heapq.heappop(self._queue)[-1]

class Item:
	def __init__(self,name):
		self.name = name
		
	def __repr__(self):  # 覆写 __repr__ 相当于定制 toString()
		# return 'Item({!s})'.format(self.name) >> Item(bar)
		# return 'Item({!r})'.format(self.name) >> Item('bar') !r 调用的是 repr() 取得失标准字符展示形式
		return 'Item({!s})'.format(self.name)
	


def test_heapq_list(*nums):
	'''
	获取 top-n ，当待取出数据集合远小于总集合时，可以使用 heapq nlargest nsmallest 进行堆内排序
	如果二者接近，则不适合 heapq 取值了，直接使用 sorted(items)[:n] 或 sorted(items)[-n:] 取值即可
	
	:param nums:
	:return:
	'''
	# nums 在定义函数时就被声明成为了list，因此直接具备 list 属性
	print(heapq.nlargest(2,nums))  # 最大的2个
	print(heapq.nsmallest(2,nums)) # 最小的2个


def test_heapq_dict(*args):
	cheap = heapq.nlargest(3,args,key=lambda a:a['price']) # 按指定的取key 方式取出key进行排序
	expensive = heapq.nsmallest(3,args,key=lambda a:a['price'])
	print(cheap)
	print(expensive)


def test_heapify():
	nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
	heap = list(nums)
	heapq.heapify(heap)
	print(heap) # [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8] 堆底heap[0]元素必须是最小的，其余顺序可错乱
	
	v = heapq.heappop(heap) # -4 heappop 弹出堆底元素
	print(v)
	v = heapq.heappop(heap) # 1
	print(v)
	v = heapq.heappop(heap) # 2
	print(v)

if __name__=="__main__":
	try:
		# print_stack()
		# test_q()
		# test_pop()
		
		# nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
		# test_heapq_list(*nums) # def test_heapq(*nums) 接受不定参数，传参是时必须将集合解封
		#
		# portfolio = [
		# 	{'name': 'IBM', 'shares': 100, 'price': 91.1},
		# 	{'name': 'AAPL', 'shares': 50, 'price': 543.22},
		# 	{'name': 'FB', 'shares': 200, 'price': 21.09},
		# 	{'name': 'HPQ', 'shares': 35, 'price': 31.75},
		# 	{'name': 'YHOO', 'shares': 45, 'price': 16.35},
		# 	{'name': 'ACME', 'shares': 75, 'price': 115.65}
		# 	]
		# test_heapq_dict(*portfolio)
		
		# test_heapify()
		
		# 优先级不同，从大到小，优先级相同，先进先出
		q = PriortyQueue()
		q.push(Item('foo'),1) # 3
		q.push(Item('bar'),5) # 1
		q.push(Item('spam'),4) # 2
		q.push(Item('grok'),1) # 4
		
		v = q.pop()
		print(v)
		v = q.pop()
		print(v)
		v = q.pop()
		print(v)
		v = q.pop()
		print(v)
		
		
		
		
		pass
	except:
		traceback.print_exc()
	finally:
		os._exit(0)
import os,traceback
from operator import itemgetter
'''
import os,traceback,struct


def test_pack():
	'''
	将128位长的16个元素的字节字符串解析层10进制整型
	:return:
	'''
	data = b'\x00\x124V\x00x\x90\xab\x00\xcd\xef\x01\x00#\x004' # 字节字符串
	print(len(data)) # 16
	print(int.from_bytes(data,'little')) # 69120565665751139577663547927094891008
	print(int.from_bytes(data,'big')) # 94522842520747284487117727783387188
	
	print(int(94522842520747284487117727783387188).to_bytes(16,'big')) # b'\x00\x124V\x00x\x90\xab\x00\xcd\xef\x01\x00#\x004'
	print(int(69120565665751139577663547927094891008).to_bytes(16,'little')) # b'\x00\x124V\x00x\x90\xab\x00\xcd\xef\x01\x00#\x004'

def test_struct():
	'''
itemgetter从dict 取出指定 key 进行排序

'''

def do_sort():
	rows = [
		{'fname': 'Brian', 'lname': 'Jones', 'uid': 1003},
		{'fname': 'David', 'lname': 'Beazley', 'uid': 1002},
		{'fname': 'John', 'lname': 'Cleese', 'uid': 1001},
		{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}
		]

	rows_by_fname = sorted(rows,key=itemgetter('fname')) # 基于 fname 排序 等效于
	rows_by_fname1 = sorted(rows,key=lambda a:a['fname'])
	print(rows_by_fname1)
	'''
	[{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}]
	'''
	
	rows_by_uid = sorted(rows,key=itemgetter('uid')) # 基于 uid 排序 等效于
	rows_by_uid1 = sorted(rows,key=lambda a:a['uid'])
	print(rows_by_uid1)
	'''
	[{'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004}]
	'''
	
	rows = [
		{'fname': 'Brian', 'lname': 'Jones', 'uid': 1003},
		{'fname': 'Brian', 'lname': 'Beazley', 'uid': 1002},
		{'fname': 'John', 'lname': 'Cleese', 'uid': 1001},
		{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}
		]
	
	rows_by_fname_uid = sorted(rows,key=itemgetter('fname','uid')) # 基于 fname，uid 排序 等效于
	rows_by_fname_uid1 = sorted(rows,key=lambda a:(a['fname'],a['uid']))
	print(rows_by_fname_uid1)
	'''
	[{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}, {'fname': 'Brian', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}]
	'''


if __name__=="__main__":
	try:
	
		do_sort()
		
		
		pass
	except:
		traceback.print_exc()
	finally:
		os._exit(0)


大整数和字节字符串之间的转换操作并不常见。然而，在一些应用领域有时候也会 出现，比如密码学或者网络。例如，IPv6 网络地址使用一个 128 位的整数表示。如果 你要从一个数据记录中提取这样的值的时候，你就会面对这样的问题。
作为一种替代方案，你可能想使用 6.11 小节中所介绍的 struct 模块来解压字节。 这样也行得通，不过利用 struct 模块来解压对于整数的大小是有限制的。因此，你可 能想解压多个字节串并将结果合并为最终的结果，就像下面这样:
	:return:
	'''
	
	# struct 将长字节字符串解析成高低位字符串，然后通过位移拼接即可恢复
	data = b'\x00\x124V\x00x\x90\xab\x00\xcd\xef\x01\x00#\x004' # 字节字符串
	hi,lo = struct.unpack('>QQ',data)
	print((hi<<64) + lo) # 94522842520747284487117727783387188
	
	x = 0x01020304
	print(x.to_bytes(4,'big')) # b'\x01\x02\x03\x04'
	print(x.to_bytes(4,'little')) # b'\x04\x03\x02\x01'
	
	pass

def test_to_bytes():
	x = 523**23
	base = 8
	
	'''
	x.bit_length() 得到存储x需要的二进制位数，如果不能整除则 +8bit
	'''
	nbytes,rem = divmod(x.bit_length(),8)
	if rem :
		nbytes +=1
	else:
		# To save 335381300113661875107536852714019056160355655333978849017944067 base on 8, need 26 bytes (208 bits) > 208
		print('To save {x} base on {base}, need {num} bytes ({bits} bits) > {total}'.format(x=x,base=base,num=nbytes,bits=nbytes*8,total=x.bit_length()))
			
	# b'\x03X\xf1\x82iT\x96\xac\xc7c\x16\xf3\xb9\xcf\x18\xee\xec\x91\xd1\x98\xa2\xc8\xd9R\xb5\xd0'
	print(x.to_bytes(nbytes,'little')) # 按指定位数存储


if __name__=="__main__":
	try:
		# test_pack()
		# test_struct()
		test_to_bytes()
		pass
	except:
		traceback.print_exc()
	finally:
		os._exit(0)
